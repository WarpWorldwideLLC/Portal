/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M22
 * Generated at: 2017-12-16 23:06:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.captcha.botdetect.web.servlet.Captcha;

public final class botdetect_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/Users/jarp/Dropbox/Personal/WARP%20Worldwide/WARP%20Source/JWeb/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/com.warpww.web/WEB-INF/lib/botdetect-jsp20-4.0.beta3.1.jar!/META-INF/captcha.tld", Long.valueOf(1503677402000L));
    _jspx_dependants.put("/WEB-INF/lib/botdetect-jsp20-4.0.beta3.1.jar", Long.valueOf(1513458444000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.captcha.botdetect.web.servlet.Captcha");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fbotDetect_005fcaptcha_0026_005fuserInputID_005fimageWidth_005fid_005fcodeStyle_005fcodeLength_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fbotDetect_005fcaptcha_0026_005fuserInputID_005fimageWidth_005fid_005fcodeStyle_005fcodeLength_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fbotDetect_005fcaptcha_0026_005fuserInputID_005fimageWidth_005fid_005fcodeStyle_005fcodeLength_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("    <title>BotDetect Java CAPTCHA Validation: JSP Login Form CAPTCHA Code Example</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"stylesheet.css\" type=\"text/css\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <form method=\"post\" action=\"botdetect\" class=\"column\" id=\"form1\">\n");
      out.write("        <h1>BotDetect Java CAPTCHA Validation:<br> JSP Login Form CAPTCHA Code Example</h1>\n");
      out.write("        <fieldset>\n");
      out.write("            <legend>CAPTCHA included in JSP form validation</legend>\n");
      out.write("            \n");
      out.write("            <div class=\"input\">\n");
      out.write("                <label for=\"username\">Username:</label>\n");
      out.write("                <input type=\"text\" name=\"username\" id=\"username\" class=\"textbox\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.username}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("            <div class=\"input\">\n");
      out.write("                <label for=\"Password\">Password:</label>\n");
      out.write("                ");
 if (request.getAttribute("isLoggedIn") == null) { 
      out.write("<input type=\"password\" name=\"password\" id=\"password\" class=\"textbox\" />\n");
      out.write("                ");
 } else { 
      out.write("<input type=\"text\" name=\"password\" id=\"password\" class=\"textbox\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.password}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\n");
      out.write("                ");
 } 
      out.write("</div>\n");
      out.write("            \n");
      out.write("            <label class=\"incorrect\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${messages.loginError}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</label>\n");
      out.write("\n");
      out.write("            ");

                if ((request.getSession().getAttribute("isCaptchaSolved") == null) 
                        && (request.getAttribute("isLoggedIn") == null)) {
            
      out.write("<label for=\"captchaCode\" class=\"prompt\">Retype the characters from the picture:</label>\n");
      out.write("\n");
      out.write("                    <!-- Adding BotDetect Captcha to the page -->\n");
      out.write("                    ");
      if (_jspx_meth_botDetect_005fcaptcha_005f0(_jspx_page_context))
        return;
      out.write("<div class=\"validationDiv\">\n");
      out.write("                        <input id=\"captchaCode\" type=\"text\" name=\"captchaCode\" />\n");
      out.write("                        <span class=\"incorrect\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${messages.captchaIncorrect}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\n");
      out.write("                    </div>\n");
      out.write("            ");

                }
            
 if (request.getAttribute("isLoggedIn") == null) { 
      out.write("<input type=\"submit\" name=\"submitButton\" id=\"submitButton\" value=\"Login\" />\n");
      out.write("            ");
 } else { 
      out.write("<a href=\"index.jsp\">Back to login page.</a>\n");
      out.write("            ");
 } 
      out.write("</fieldset>\n");
      out.write("    </form>\n");
      out.write("            \n");
      out.write("    <div class=\"column\">\n");
      out.write("        <div class=\"column\">\n");
      out.write("            <div class=\"note\">\n");
      out.write("                <h3>CAPTCHA Code Example Description</h3>\n");
      out.write("                <p>This BotDetect Captcha Java code example shows how to add BotDetect CAPTCHA validation to simple JSP login forms.</p>\n");
      out.write("                <p>To prevent bots from trying to guess the login info by brute force submission of a large number of common values, the visitor first has to prove they are human (by solving the CAPTCHA), and only then is their username and password submission checked against the authentication data store.</p>\n");
      out.write("                <p>Also, if they enter an invalid username + password combination three times, they have to solve the CAPTCHA again. This prevents attempts in which the attacker would first solve the CAPTCHA themselves, and then let a bot brute-force the authentication info.</p>\n");
      out.write("                <p>To keep the example code simple, the example doesn't access a data store to authenticate the user, but <strong>accepts all logins with usernames and passwords at least 5 characters long as valid</strong>.</p>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    \n");
      out.write("        <div class=\"column\">\n");
      out.write("            ");
 if (Captcha.isFree()) { 
      out.write("<div class=\"note warning\">\n");
      out.write("                    <h3>Free Version Limitations</h3>\n");
      out.write("                    <ul>\n");
      out.write("                        <li>The free version of BotDetect only includes a limited subset of the available CAPTCHA image styles and CAPTCHA sound styles.</li>\n");
      out.write("                        <li>The free version of BotDetect includes a randomized <code>BotDetect&#8482;</code> trademark in the background of 50% of all Captcha images generated.</li>\n");
      out.write("                        <li>It also has limited sound functionality, replacing the CAPTCHA sound with \"SOUND DEMO\" for randomly selected 50% of all CAPTCHA codes.</li>\n");
      out.write("                        <li>Lastly, the bottom 10 px of the CAPTCHA image are reserved for a link to the BotDetect website.</li>\n");
      out.write("                    </ul>\n");
      out.write("                    <p>These limitations are removed if you <a rel=\"nofollow\" href=\"http://captcha.com/shop.html?utm_source=installation&amp;utm_medium=java&amp;utm_campaign=4.0.Beta3.1\" title=\"BotDetect CAPTCHA online store, pricing information, payment options, licensing &amp; upgrading\">upgrade</a> your BotDetect license.</p>\n");
      out.write("                </div>\n");
      out.write("            ");
 } 
      out.write("<div class=\"note warning\">\n");
      out.write("                <h3>Beta Release Warning</h3>\n");
      out.write("                <p>BotDetect Java Captcha Library Beta is a work in progress, and we need you to guide our efforts towards a polished product. Please <a href=\"http://captcha.com/contact.html?topic=java\">let us know</a> if you encounter any bugs, implementation issues, or a usage scenario you would like to discuss.</p>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("  \n");
      out.write("    <div id=\"systeminfo\">\n");
      out.write("        <p>");
      out.print( Captcha.getLibInfo() );
      out.write("</p>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_botDetect_005fcaptcha_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  botDetect:captcha
    com.captcha.botdetect.web.jsp.CaptchaTag _jspx_th_botDetect_005fcaptcha_005f0 = (com.captcha.botdetect.web.jsp.CaptchaTag) _005fjspx_005ftagPool_005fbotDetect_005fcaptcha_0026_005fuserInputID_005fimageWidth_005fid_005fcodeStyle_005fcodeLength_005fnobody.get(com.captcha.botdetect.web.jsp.CaptchaTag.class);
    boolean _jspx_th_botDetect_005fcaptcha_005f0_reused = false;
    try {
      _jspx_th_botDetect_005fcaptcha_005f0.setPageContext(_jspx_page_context);
      _jspx_th_botDetect_005fcaptcha_005f0.setParent(null);
      // /WEB-INF/botdetect.jsp(41,20) name = id type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_botDetect_005fcaptcha_005f0.setId("loginCaptcha");
      // /WEB-INF/botdetect.jsp(41,20) name = userInputID type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_botDetect_005fcaptcha_005f0.setUserInputID("captchaCode");
      // /WEB-INF/botdetect.jsp(41,20) name = codeLength type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_botDetect_005fcaptcha_005f0.setCodeLength(4);
      // /WEB-INF/botdetect.jsp(41,20) name = imageWidth type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_botDetect_005fcaptcha_005f0.setImageWidth(200);
      // /WEB-INF/botdetect.jsp(41,20) name = codeStyle type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_botDetect_005fcaptcha_005f0.setCodeStyle("ALPHA");
      int _jspx_eval_botDetect_005fcaptcha_005f0 = _jspx_th_botDetect_005fcaptcha_005f0.doStartTag();
      if (_jspx_th_botDetect_005fcaptcha_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fbotDetect_005fcaptcha_0026_005fuserInputID_005fimageWidth_005fid_005fcodeStyle_005fcodeLength_005fnobody.reuse(_jspx_th_botDetect_005fcaptcha_005f0);
      _jspx_th_botDetect_005fcaptcha_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_botDetect_005fcaptcha_005f0, _jsp_getInstanceManager(), _jspx_th_botDetect_005fcaptcha_005f0_reused);
    }
    return false;
  }
}
